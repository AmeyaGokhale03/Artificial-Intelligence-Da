import cv2
import numpy as np
import tensorflow as tf

# Load pre-trained face recognition model (assumed)
face_recognition_model = tf.keras.models.load_model('path_to_face_recognition_model')

def detect_faces(frame):
    # Convert frame to grayscale for face detection
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    # Use OpenCV's pre-trained Haar Cascade classifier for face detection
    face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
    faces = face_cascade.detectMultiScale(gray, scaleFactor=1.3, minNeighbors=5)

    for (x, y, w, h) in faces:
        # Extract face region from the frame
        face_roi = gray[y:y+h, x:x+w]
        face_roi = cv2.resize(face_roi, (100, 100))  # Resize face to match model input size

        # Normalize and preprocess face image
        face_roi = face_roi.astype('float32') / 255.0
        face_roi = np.expand_dims(face_roi, axis=0)
        face_roi = np.expand_dims(face_roi, axis=-1)

        # Perform face recognition using the pre-trained model
        predictions = face_recognition_model.predict(face_roi)
        predicted_label = np.argmax(predictions)

        # Draw rectangle around the face and display predicted label
        color = (255, 0, 0)  # Blue color for rectangle
        cv2.rectangle(frame, (x, y), (x+w, y+h), color, 2)
        cv2.putText(frame, f'Player {predicted_label}', (x, y-10), cv2.FONT_HERSHEY_SIMPLEX, 0.9, color, 2)

    return frame

# Load cricket footage (example)
video_capture = cv2.VideoCapture('path_to_cricket_video.mp4')

while True:
    ret, frame = video_capture.read()
    if not ret:
        break

    frame = detect_faces(frame)
    cv2.imshow('Player Recognition', frame)

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

video_capture.release()
cv2.destroyAllWindows()
